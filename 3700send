#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, random

DATA_SIZE = 1375 # 1500 - 20 (IP header) - 8 (UDP header) - 97 (JSON overhead: metadata we add to the message)
class Sender:
    def __init__(self, host, port):
        self.host = host # recv_host
        self.remote_port = int(port) # recv_port
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP socket, connectionless
        self.socket.bind(('0.0.0.0', 0)) # Bind to a random port on all interfaces (accepts connections from any network interface)
        self.waiting = False
        # add for reliable behavior:
        self.seq_num = 0 # next seq to send; fix initial number for simplicity
        self.cwnd = 1
        self.in_flight = [] # list of tuples (msg, timeout), keep copies of all data until ACKed
        self.timeout = 1
        self.ssthresh = 16

        self.dup_ack = 0
        self.last_ack_seq = 0
        self.done_reading = False
        # self.last_sent_seq = 0


    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush() # Flush the buffer to ensure the message is written to stderr

    def send(self, message):
        # specify (host, port) as UDP socket is connectionless
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port)) 

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            # get list of readable sockets from the tuple (readable, writable, exceptional)
            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket: # readable -> there is data ready to be received
                    k, addr = conn.recvfrom(65535)
                    ack = k.decode('utf-8')
                    self.log("Received message '%s'" % ack)

                    # handle ack msg and update cwnd
                    self.handle_ack(json.loads(ack))

                    if len(self.in_flight) < self.cwnd:
                        self.waiting = False

                elif conn == sys.stdin:
                    if self.done_reading and len(self.in_flight) == 0:
                        self.log("All done!")
                        sys.exit(0)
                    data = sys.stdin.read(DATA_SIZE)
                    if len(data) == 0:
                        self.done_reading = True
                        continue

                    msg = { "type": "msg", "data": data }
                    #TODO: make msg reliable
                    self.make_reliable(msg, self.seq_num)

                    self.log("Sending message '%s'" % msg)
                    self.send(msg)

                    # wait for ack if cwnd is full
                    if len(self.in_flight) >= self.cwnd:
                        self.waiting = True

            # handle timeouts and retransmissions
            self.resend_timeout()          

        return

    def make_reliable(self, msg, seq_num):
        msg["seq_num"] = seq_num
        self.seq_num += len(msg["data"])
        # keep a copy until ACKed
        self.in_flight.append((msg, time.time() + self.timeout, False)) # (msg, timeout, RT?)
        self.last_sent_seq = msg["seq_num"]

        print(f"\n{len(msg['data'])} bytes read from STDIN\n")

    def update_cwnd_on_ack(self):
        if self.cwnd < self.ssthresh:
            self.cwnd += 1
        else:
            self.cwnd += 1/self.cwnd
        self.waiting = False

    def update_cwnd_on_timeout(self):
        self.ssthresh = max(self.cwnd/2, 2)
        self.cwnd = 1
        self.waiting = True

    def retransmit(self, i):
        msg = self.in_flight[i][0]
        self.log(f"\nResend: {msg}")
        self.send(msg)
        self.in_flight[i] = (self.in_flight[i][0], time.time() + self.timeout, True)
        

    def resend_timeout(self):
        for i in range(len(self.in_flight)):
            if self.in_flight[i][1] < time.time():
                self.retransmit(i)
                self.update_cwnd_on_timeout()
                break
    
    def handle_ack(self, ack: dict):
        '''remove all messages with seq_num <= ack["ack_num"] and update cwnd and timeout'''
        curr_time = time.time()
        if ack["ack_num"] == self.last_ack_seq:
            self.dup_ack += 1
            if self.dup_ack == 3:
                self.log(f"\nReceived 3 duplicate acks: {ack}")
                self.retransmit(0)
                self.cwnd = self.cwnd/2
                self.dup_ack = 0

        if ack["ack_num"] > self.last_ack_seq:
            self.last_ack_seq = ack["ack_num"]
            while self.in_flight and self.in_flight[0][0]["seq_num"] < self.last_ack_seq:
                # update timeout
                if not self.in_flight[0][2]: # not RT msg
                    sample_rtt = curr_time - self.in_flight[0][1]
                    self.calibrate_rtt(sample_rtt)
                # update cwnd
                self.update_cwnd_on_ack()
                self.in_flight.pop(0)
        
    # def check_ack(self, ack: dict):
    #     if ack["type"] == "ack":
    #         self.dup_ack = 0
    #         self.log(f"\nReceived ack: {ack}")
    #         # remove all messages with seq_num <= ack["seq_num"]
    #         for i in range(len(self.in_flight)):
    #             if self.in_flight[i][0]["seq_num"] <= ack["seq_num"]:
    #                 self.in_flight.pop(i)
    #                 i -= 1
    #         # update cwnd
    #         if self.cwnd < self.ssthresh:
    #             self.cwnd *= 2
    #         else:
    #             self.cwnd += 1
    #         # self.waiting = False
    #     else:
    #         self.dup_ack += 1
    #         if self.dup_ack == 3:
    #             self.log(f"\nReceived 3 duplicate acks: {ack}")
    #             self.ssthresh = max(self.cwnd/2, 2)
    #             self.cwnd = 1
    #             self.dup_ack = 0
    #             self.waiting = False
    #             self.send(self.in_flight[0][0])
    #             self.in_flight[0] = (self.in_flight[0][0], time.time() + self.timeout)
    #             # self.waiting = True
    
    def calibrate_rtt(self, sample_rtt):
        alpha = 0.875 # for old sample
        if self.timeout == 1: # initial default value
            self.timeout = sample_rtt * 2
        else:
            self.timeout = (alpha * self.timeout + (1 - alpha) * sample_rtt) * 2


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
