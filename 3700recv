#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
import hashlib

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1] # Get the port number we are bound to
        self.log("Bound to port %d" % self.port)
        self.remote_host = None
        self.remote_port = None
        # add for reliable behavior:
        self.next_expected = 0
        self.recved = dict() # {seq_num: data}

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def unpack(self, packet):
        checksum = struct.unpack('!32s', packet[:32])[0]
        seq_num = struct.unpack('!I', packet[32:36])[0]
        data = packet[36:].decode('utf-8')
        return checksum, seq_num, data

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                # data, addr = conn.recvfrom(65535) # addr is the sender's address tuple (host, port)
                packed_msg, addr = conn.recvfrom(65535) # addr is the sender's address tuple (host, port)

                # Grab the remote host/port if we don't alreadt have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                # msg = json.loads(data.decode('utf-8'))
                checksum, seq_num, data = self.unpack(packed_msg)
                # Check for packet corruption
                
                if checksum != hashlib.sha256(packed_msg[32:]).digest():
                    # self.log(f"\nCorrupted packet received: {msg}")
                    continue  # Ignore corrupted packets

                # self.log("Received data message %s" % msg)
                # Always send back an ack
                self.ack_msg(checksum, seq_num, data)
        return

    def ack_msg(self, checksum, seq_num, data):
        if seq_num >= self.next_expected and seq_num not in self.recved:
            self.recved[seq_num] = data

            while self.next_expected in self.recved:
                data = self.recved.pop(self.next_expected)
                self.next_expected += len(data)
                print(data, end="", flush=True)

        # accumulative ack
        ack = {"type": "ack", "ack_num": self.next_expected}
        self.send(ack)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
    
